package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BulletMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Magic, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "Magic")
		return
	}
	z.Version, err = dc.ReadUint8()
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	z.Type, err = dc.ReadUint8()
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	z.Timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.UserID, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	z.LiveID, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "LiveID")
		return
	}
	z.ContentLen, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "ContentLen")
		return
	}
	z.Content, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BulletMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Magic)
	if err != nil {
		err = msgp.WrapError(err, "Magic")
		return
	}
	err = en.WriteUint8(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	err = en.WriteUint8(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteUint64(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	err = en.WriteUint64(z.LiveID)
	if err != nil {
		err = msgp.WrapError(err, "LiveID")
		return
	}
	err = en.WriteUint16(z.ContentLen)
	if err != nil {
		err = msgp.WrapError(err, "ContentLen")
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BulletMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o = msgp.AppendUint16(o, z.Magic)
	o = msgp.AppendUint8(o, z.Version)
	o = msgp.AppendUint8(o, z.Type)
	o = msgp.AppendInt64(o, z.Timestamp)
	o = msgp.AppendUint64(o, z.UserID)
	o = msgp.AppendUint64(o, z.LiveID)
	o = msgp.AppendUint16(o, z.ContentLen)
	o = msgp.AppendString(o, z.Content)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BulletMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Magic, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Magic")
		return
	}
	z.Version, bts, err = msgp.ReadUint8Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	z.Type, bts, err = msgp.ReadUint8Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.UserID, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	z.LiveID, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LiveID")
		return
	}
	z.ContentLen, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ContentLen")
		return
	}
	z.Content, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BulletMessage) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.Uint8Size + msgp.Uint8Size + msgp.Int64Size + msgp.Uint64Size + msgp.Uint64Size + msgp.Uint16Size + msgp.StringPrefixSize + len(z.Content)
	return
}
